" Use VIM settings (not Vi)
set nocompatible

" Install vim-plug if it's not found
if has('nvim')
  let autoload_plug_path = stdpath('data') . '/site/autoload/plug.vim'
  if !filereadable(autoload_plug_path)
    silent execute '!curl -fLo ' . autoload_plug_path . '  --create-dirs 
        \ "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
  unlet autoload_plug_path
else
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
endif

call plug#begin('~/.vim/plugged')
  Plug 'scrooloose/nerdtree'
  Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-fugitive'
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'majutsushi/tagbar'
  Plug 'vimwiki/vimwiki'
  Plug 'sheerun/vim-polyglot'
  Plug 'neoclide/coc.nvim', { 'branch': 'release' }

  " TODO Remove after CS352
  Plug 'derekwyatt/vim-scala'
call plug#end()

colorscheme bw

" Filetype detection
filetype on         " Enable detecting filetype
filetype plugin on  " Load plugin file (if there is one) for this filetype
filetype indent on  " Use language dependent indenting

au! FileType css,scss setl iskeyword+=- " Make hyphens part of words in CSS files

" Miscellaneous settings
set rulerformat=%=%l\:%c        " %=: align right, %l: line number, %c: column number
set ruler                       " Show cursor stats in bottom left
set confirm                     " Prompt when trying to quit without saving
set autoread                    " Automatically read files
set autowrite                   " Automatically write files
set splitright                  " Open new splits to the right of the current one
set scrolloff=5                 " Always show at least 5 lines on top or bottom 
set fillchars=vert:\            " Don't put characters in split divider
set backspace=indent,eol,start  " Make backspace like a normal editor

" Searching
set hlsearch   " Search highlighting
set incsearch  " Start searching as you type
set ignorecase " Ignore case
set smartcase  " Only use case when search has capitals

" Find settings
set path+=**                       " Let :find search sub directories
set wildignore+=**/node_modules/** " Make :find ignore node_modules

" Tabs and indention
set expandtab     " Type spaces when you hit tab
set autoindent    " Copy indention depth on new line
set tabstop=2     " Tabs take up 2 columns
set shiftwidth=2  " Indent 2 columns with '<<' and '>>'
set shiftround    " Use multiple of shiftwidth when indenting with '<<' and '>>'

" Rendering speed
set ttyfast     " Faster redrawing.
set lazyredraw  " Only redraw when necessary.

" Colors
syntax on                             " Enable syntax highlighting
set background=dark                   " Use a dark background
set cursorline                        " Highlight line cursor is on
hi CursorLine cterm=NONE ctermbg=240  " Set cursorline color to light grey
hi clear SpellBad                     " Reset spell checker color
hi SpellBad cterm=underline           " Underline misspelled words

" Spell checking
set spelllang=en_us  " Use English spell checking
set spell            " Enable spell checking

" Tab complete settings
set wildmenu  " Enable command line completions
" wildmode defines how to show completions
" list:full  When more than one match, list them all and select the first
" full       Complete to next full match, wrap around at end of options
set wildmode=list:full,full
" complete defines where to look for possible completions
" .  Scan current buffer
" w  Scan other windows
" b  Scan buffers in the buffer list
" u  Scan unloaded buffers in the buffer list
" i  Scan included files
" t  Scan tag files
set complete=.,w,b,u,t,i
" completeopt defines how to show insertion mode completions
" menu  Show completion menu, unless there's only one option
set completeopt=menu

" Hit tab to start auto complete when typing, otherwise just insert a tab
function! Tab_Or_Complete()
  if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-N>"
  else
    return "\<Tab>"
  endif
endfunction
imap <Tab> <C-R>=Tab_Or_Complete()<CR>

function MyTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    " select the highlighting
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif

    " set the tab page number (for mouse clicks)
    let s .= '%' . (i + 1) . 'T'

    let buflist = tabpagebuflist(i+1)
    let winnr = tabpagewinnr(i+1)
    let bufname = bufname(buflist[winnr - 1])
    let label = empty(bufname) ? '[No Name]' : bufname
    let s .= ' ' . label . ' '
  endfor

  " after the last tab fill with TabLineFill and reset tab page nr
  let s .= '%#TabLineFill#%T'

  " right-align the label to close the current tab page
  if tabpagenr('$') > 1
    let s .= '%=%#TabLine#%999X'
  endif

  return s
endfunction

set tabline=%!MyTabLine()

" Temporary files
" Instead of having a bunch of these floating around, centralize them
" Create temp files directory if needed
if !isdirectory($HOME.'/.vim/files') && exists('*mkdir')
  call mkdir($HOME.'/.vim/files')

  call mkdir($HOME.'/.vim/files/backup')
  call mkdir($HOME.'/.vim/files/swap')
  call mkdir($HOME.'/.vim/files/undo')
  call mkdir($HOME.'/.vim/files/info')
  call mkdir($HOME.'/.vim/files/tags')
endif

" Creates a backup of a file when you open it
set backup                               " Use backup files 
set backupext =-vimbackup                " Extension for backup files
set backupskip=/tmp/*,/private/tmp/*     " Directories to not use backup files
set backupdir =$HOME/.vim/files/backup/  " Directory for backup files

" Swap files, stores changes made to buffers. Can be used to recover on crash
set updatecount=100                      " Number of chars until swap is written
set directory  =$HOME/.vim/files/swap//  " Double slash means use full path

" Stores undo history 
set undofile                        " Use undo files
set undodir=$HOME/.vim/files/undo/  " Directory for undo files

" Stores things like search history and registers on quit
" %     Store buffer list
" <1000 Store up to 800 lines in each register
" '100  Store up to 100 file marks
" /1000 Store up to 1000 searches
" :1000 Store up to 1000 commands
" Last argument is where viminfo is stored
if !has('nvim')
  set viminfo+=%,<1000,'100,/1000,:1000,n$HOME/.vim/files/info/viminfo
endif


" Jump to the line a file was at when it was closed
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" Set vimwiki home path and tell it to use markdown
let g:vimwiki_list = [{'path': '~/Code/notes',
      \ 'syntax': 'markdown',
      \ 'ext': '.md'}]

let g:gutentags_cache_dir = '~/.vim/files/tags/'
let g:gutentags_exclude_project_root=['/usr/local', '~/Code/Purdue-CS']

let g:tagbar_compact=1    " Make tagbar take up less space

let NERDTreeShowHidden=1  " Show hidden files
let NERDTreeMinimalUI=1   " Make NERDTree take up less space
let NERDTreeIgnore = ['.DS_Store', 'tags', 'tags.lock']

let g:go_fmt_command="goimports"  " Run Go imports on save

let mapleader=" "         " Use <Space> as the leader key

map <C-n> ;NERDTreeToggle<CR>

" Normal mode remappings
nnoremap ; :
nnoremap <Leader>w <C-w>
nnoremap <Leader><Leader> <C-^>
nnoremap <Leader>j :w<Enter>
nnoremap <Leader>k :wq<Enter>
nnoremap <silent> <Leader>/ :nohlsearch<CR>

" Insert mode remappings
inoremap jk <Esc>`^

" Find remapping
nnoremap <Leader>f :find 

" Tagbar remappings
nnoremap <leader>t :TagbarToggle<CR>

" Remapping things to noop so they get out of the way
nnoremap <_> <Plug>Vimwiki2HTML
nnoremap <_> <Plug>Vimwiki2HTMLBrowse
let g:tagbar_map_showproto = '<F18>'

" Expand "dtdy" int today's date
iab dtdy <c-r>=strftime("%Y-%m-%d")<CR>

" Resize windows when vim is resized
autocmd VimResized * :wincmd =

" Highlight merge conflict markers
match Todo '\v^(\<|\=|\>){7}([^=].+)?$'

nnoremap <Leader>h :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
